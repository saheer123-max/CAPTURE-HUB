import React, { useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import Calendar from 'react-calendar';
import 'react-calendar/dist/Calendar.css';
import { useGlobalContext } from '../Context/GlobalContext';

const PhotographerBooking = () => {
  const { id: photographerId } = useParams();
  const { token, backendUrl } = useGlobalContext();
  const navigate = useNavigate(); // Added for navigation

  const [selectedDates, setSelectedDates] = useState([new Date(), new Date()]);
  const [eventType, setEventType] = useState('');
  const [message, setMessage] = useState('');
  const [loading, setLoading] = useState(false);

  const handleBooking = async () => {
    const [startDate, endDate] = selectedDates;

    if (!eventType || !startDate || !endDate) {
      alert('‚ùå ‡¥é‡¥≤‡µç‡¥≤‡¥æ ‡¥Ü‡¥µ‡¥∂‡µç‡¥Ø‡¥Æ‡¥æ‡¥Ø ‡¥´‡µÄ‡µΩ‡¥°‡µÅ‡¥ï‡¥≥‡µÅ‡¥Ç ‡¥®‡¥ø‡¥±‡¥ï‡µç‡¥ï‡µÅ‡¥ï.');
      return;
    }

    if (startDate >= endDate || (endDate - startDate < 1000)) {
      alert('‚ùå ‡¥∂‡¥∞‡¥ø‡¥Ø‡¥æ‡¥Ø ‡¥§‡µÄ‡¥Ø‡¥§‡¥ø ‡¥∂‡µç‡¥∞‡µá‡¥£‡¥ø ‡¥§‡¥ø‡¥∞‡¥û‡µç‡¥û‡µÜ‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥ï.');
      return;
    }

    if (!token) {
      alert('‚ùå ‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥≤‡µã‡¥ó‡¥ø‡µª ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï.');
      return;
    }

    // ‚úÖ üîΩ Fetch user from localStorage
    const storedUser = localStorage.getItem('user');
    let customerName = '';
    if (storedUser) {
      try {
        const user = JSON.parse(storedUser);
        customerName = user.name || '';
      } catch (err) {
        console.error('‚ùå user parse error:', err);
      }
    }

    const payload = {
      photographerId: parseInt(photographerId),
      eventType,
      startDate: new Date(startDate).toISOString(),
      endDate: new Date(endDate).toISOString(),
      message,
      status: 'Pending',
      customerName,
    };

    console.log('Request Payload:', payload);

    setLoading(true);

    try {
      const response = await fetch(`${backendUrl}/api/booking/request`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        console.error('Server Error Response:', errorData);
        alert(`‚ùå ${errorData.message || '‡¥∏‡µÜ‡µº‡¥µ‡µº ‡¥™‡¥ø‡¥¥‡¥µ‡µç'}`);
        return;
      }

      const data = await response.json();
      console.log('Response Data:', data);

      if (data.success) {
        alert(`‚úÖ ${data.message || '‡¥¨‡µÅ‡¥ï‡µç‡¥ï‡¥ø‡¥Ç‡¥ó‡µç ‡¥µ‡¥ø‡¥ú‡¥Ø‡¥ï‡¥∞‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥Ö‡¥Ø‡¥ö‡µç‡¥ö‡µÅ!'}`);
        setMessage('');
        setEventType('');
        // Navigate to Customer component with bookingStatus
        navigate('/customer', { state: { bookingStatus: 'Pending' } });
      } else {
        alert(`‚ùå ${data.message || '‡¥¨‡µÅ‡¥ï‡µç‡¥ï‡¥ø‡¥Ç‡¥ó‡µç ‡¥™‡¥∞‡¥æ‡¥ú‡¥Ø‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü‡µÅ'}`);
      }
    } catch (err) {
      console.error('Booking Error:', err);
      alert('‚ùå ‡¥®‡µÜ‡¥±‡µç‡¥±‡µç‚Äå‡¥µ‡µº‡¥ï‡µç‡¥ï‡µç ‡¥™‡¥ø‡¥¥‡¥µ‡µç.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 p-6">
      <div className="max-w-md mx-auto bg-white shadow-lg p-6 rounded-lg">
        <h2 className="text-2xl font-bold mb-4 text-blue-600">üìÖ ‡¥¨‡µÅ‡¥ï‡µç‡¥ï‡¥ø‡¥Ç‡¥ó‡µç ‡¥±‡µá‡¥û‡µç‡¥ö‡µç ‡¥§‡¥ø‡¥∞‡¥û‡µç‡¥û‡µÜ‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥ï</h2>

        <Calendar
          onChange={(dates) => {
            console.log('üìÖ Selected Dates:', dates);
            setSelectedDates(dates);
          }}
          value={selectedDates}
          selectRange={true}
          minDate={new Date()}
        />

        <select
          className="w-full mt-4 border p-2 rounded"
          value={eventType}
          onChange={(e) => setEventType(e.target.value)}
          required
        >
          <option value="">‡¥á‡¥µ‡¥®‡µç‡¥±‡µç ‡¥§‡¥∞‡¥Ç ‡¥§‡¥ø‡¥∞‡¥û‡µç‡¥û‡µÜ‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥ï</option>
          <option value="Wedding">‡¥µ‡¥ø‡¥µ‡¥æ‡¥π‡¥Ç</option>
          <option value="Birthday">‡¥ú‡¥®‡µç‡¥Æ‡¥¶‡¥ø‡¥®‡¥Ç</option>
          <option value="Engagement">‡¥®‡¥ø‡¥∂‡µç‡¥ö‡¥Ø‡¥Ç</option>
          <option value="Other">‡¥Æ‡¥±‡µç‡¥±‡µÅ‡¥≥‡µç‡¥≥‡¥µ</option>
        </select>

        <textarea
          className="w-full mt-4 border p-2 rounded"
          placeholder="‡¥¨‡µÅ‡¥ï‡µç‡¥ï‡¥ø‡¥Ç‡¥ó‡µç ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡µæ ‡¥ö‡µá‡µº‡¥ï‡µç‡¥ï‡µÅ‡¥ï..."
          value={message}
          onChange={(e) => setMessage(e.target.value)}
          required
        />

        <button
          className="mt-4 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:opacity-50"
          onClick={handleBooking}
          disabled={loading || !eventType || !message}
        >
          {loading ? '‡¥Ö‡¥Ø‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ...' : '‡¥á‡¥™‡µç‡¥™‡µã‡µæ ‡¥¨‡µÅ‡¥ï‡µç‡¥ï‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï'}
        </button>
      </div>
    </div>
  );
};

export default PhotographerBooking;